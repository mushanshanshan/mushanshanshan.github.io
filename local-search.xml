<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Conditional Variational Auto-Encoder</title>
    <link href="/2022/03/26/Conditional-Variational-Auto-Encoder/"/>
    <url>/2022/03/26/Conditional-Variational-Auto-Encoder/</url>
    
    <content type="html"><![CDATA[<p>VAEs are suitable for generating unseen data, but cannot control the label. The CVAE (Conditional VAE)  can generate the data you want to generate by specifying its labels when generating data. The structure diagram of CVAE is shown below:</p><p><img src="/Conditional-Variational-Auto-Encoder/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=.jpeg" alt="CVAE（条件变分自动编码器）简单理解_数据"></p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">import</span> utils<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CVAE</span>(nn.Module):<br>    <span class="hljs-string">&quot;&quot;&quot;Implementation of CVAE(Conditional Variational Auto-Encoder)&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, feature_size, class_size, latent_size</span>):<br>        <span class="hljs-built_in">super</span>(CVAE, self).__init__()<br><br>        self.fc1 = nn.Linear(feature_size + class_size, <span class="hljs-number">200</span>)<br>        self.fc2_mu = nn.Linear(<span class="hljs-number">200</span>, latent_size)<br>        self.fc2_log_std = nn.Linear(<span class="hljs-number">200</span>, latent_size)<br>        self.fc3 = nn.Linear(latent_size + class_size, <span class="hljs-number">200</span>)<br>        self.fc4 = nn.Linear(<span class="hljs-number">200</span>, feature_size)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">self, x, y</span>):<br>        h1 = F.relu(self.fc1(torch.cat([x, y], dim=<span class="hljs-number">1</span>)))  <span class="hljs-comment"># concat features and labels</span><br>        mu = self.fc2_mu(h1) <span class="hljs-comment"># got #latent_size u</span><br>        log_std = self.fc2_log_std(h1) <span class="hljs-comment"># got #latent_size std</span><br>        <span class="hljs-keyword">return</span> mu, log_std<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">self, z, y</span>):<br>        h3 = F.relu(self.fc3(torch.cat([z, y], dim=<span class="hljs-number">1</span>)))  <span class="hljs-comment"># concat latents and labels</span><br>        recon = torch.sigmoid(self.fc4(h3))  <span class="hljs-comment"># use sigmoid because the input image&#x27;s pixel is between 0-1</span><br>        <span class="hljs-keyword">return</span> recon<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reparametrize</span>(<span class="hljs-params">self, mu, log_std</span>):<br>        std = torch.exp(log_std) <br>        eps = torch.randn_like(std)  <span class="hljs-comment"># simple from standard normal distribution</span><br>        z = mu + eps * std <span class="hljs-comment"># resample from u and std wo got from encode part</span><br>        <span class="hljs-keyword">return</span> z<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x, y</span>):<br>        mu, log_std = self.encode(x, y)<br>        z = self.reparametrize(mu, log_std)<br>        recon = self.decode(z, y) <span class="hljs-comment"># reconstruct y_hat from our resample parameters</span><br>        <span class="hljs-keyword">return</span> recon, mu, log_std<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss_function</span>(<span class="hljs-params">self, recon, x, mu, log_std</span>) -&gt; torch.Tensor:<br>        recon_loss = F.mse_loss(recon, x, reduction=<span class="hljs-string">&quot;sum&quot;</span>)  <span class="hljs-comment"># reconstrct loss</span><br>        kl_loss = -<span class="hljs-number">0.5</span> * (<span class="hljs-number">1</span> + <span class="hljs-number">2</span>*log_std - mu.<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>) - torch.exp(<span class="hljs-number">2</span>*log_std)) <span class="hljs-comment"># KL diversity </span><br>        kl_loss = torch.<span class="hljs-built_in">sum</span>(kl_loss)<br>        loss = recon_loss + kl_loss<br>        <span class="hljs-keyword">return</span> loss<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>DeepLearning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepLearning</tag>
      
      <tag>TTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spost</title>
    <link href="/2022/03/26/spost/"/>
    <url>/2022/03/26/spost/</url>
    
    <content type="html"><![CDATA[<p>Test.</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/26/hello-world/"/>
    <url>/2022/03/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
